# -*- coding: utf-8 -*-
"""Copy of Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Dhriw5slc_-l2E4FAVQq5HZqyrfThBcn

Antoine Equation Linear and Non-Linear Regression Homeowork 
  -Model Vapor Pressure of water using experimental data!
"""

import numpy as np
from plotly.subplots import make_subplots
import plotly.io as pi 
import pandas as pd
import jax
import jax.numpy as jnp
from jax.config import config
from scipy.optimize import minimize
config.update("jax_enable_x64", True)
!git clone https://github.com/profteachkids/CHE5136_Fall2021

"""Grab Data"""

data=np.loadtxt("WaterVaporPressure.csv", delimiter=",") #loads text data from directory correctly
T = data[:,0] #pulls first column of csv file
logPV = np.log10(data[:,1]) #pulls second column from csv file and takes log

"""Graph Data"""

fig = make_subplots(rows=1,cols=1)
fig.add_scatter(x=T, y=log_Pv, mode='markers', marker_size=5, marker_color='rgba(0,0,0,0)',
                marker_line_color='rgb(0,0,0)', marker_line_width=2, name='Data')
fig.update_layout(xaxis_title='T (K)', yaxis_title='Log of Vapor Pressure')
fig.show()

"""**LINEAR REGRESSION**"""

t =np.c_[T, np.ones_like(T)] #creates new column like T filled with 1s
m, b = np.linalg.inv(t.T @ t) @ t.T @ logPV 
fig.add_scatter(x=T, y= m*T+b, mode='lines',name='Antoine Equation Estimate Linear')

"""**NON-LINEAR REGRESSION**"""

def model(a, b, c, T): #define a function with varriables a,b,c,T
  return a-b/(T+c)

a = 5   #defines initial guesses for abc constants
b = 100
c = 10
x0 = [a, b, c]

def square_error(x0, T, logPV): #defines function of square error, takes guess and subtracts it from actual data point
  PVModel = model(x0[0],x0[1],x0[2], T) #takes guesses from abc and models PVap using model function
  error = jnp.sum( (PVModel-logPV)**2) #calculates sum square error 
  return error

res = minimize(square_error, x0=x0, args=(T, logPV), tol=1e-10) #returns minimized error from square_error function
#Minimizing the sqaure error between the PVModel and logPV will result in the PVModel converging onto the value of logPV. The constants used to generate this PVModel data 
#will then be saved as your abc antoine constants. That is why the square error + minimization works.

"""Create Model Equation and Line from abc constants determined

"""

TModel = jnp.linspace(T[0],T[-1],100) #creates data between the original values of T to test equation
PVapModel = model(*res.x, TModel) #creates data for PVap using abc values from Tmodel
fig.add_scatter(x= TModel, y= PVapModel, mode='lines', line_width=1, name='Antoine Equation Estimate Non-Linear')